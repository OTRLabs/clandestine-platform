import { domainOf } from "./domain.js";
import { serializePrimitive } from "./primitive.js";
import { register } from "./registry.js";
export const snapshot = (data, opts = { onUndefined: "(undefined)" }) => _serialize(data, opts, []);
export const print = (data, indent) => console.log(printable(data, indent));
export const printable = (data, indent) => {
    switch (domainOf(data)) {
        case "object":
            const o = data;
            const ctorName = o.constructor.name;
            return (ctorName === "Object" || ctorName === "Array" ?
                JSON.stringify(_serialize(o, printableOpts, []), null, indent)
                : o instanceof Date ? o.toDateString()
                    : typeof o.expression === "string" ? o.expression
                        : ctorName);
        case "symbol":
            return printableOpts.onSymbol(data);
        default:
            return serializePrimitive(data);
    }
};
const printableOpts = {
    onCycle: () => "(cycle)",
    onSymbol: v => `Symbol(${register(v)})`,
    onFunction: v => `Function(${register(v)})`
};
const _serialize = (data, opts, seen) => {
    switch (domainOf(data)) {
        case "object": {
            if (typeof data === "function")
                return printableOpts.onFunction(data);
            if (seen.includes(data))
                return "(cycle)";
            const nextSeen = [...seen, data];
            if (Array.isArray(data))
                return data.map(item => _serialize(item, opts, nextSeen));
            if (data instanceof Date)
                return data.toDateString();
            const result = {};
            for (const k in data)
                result[k] = _serialize(data[k], opts, nextSeen);
            return result;
        }
        case "symbol":
            return printableOpts.onSymbol(data);
        case "bigint":
            return `${data}n`;
        case "undefined":
            return opts.onUndefined ?? "undefined";
        default:
            return data;
    }
};
