import type { BaseRoot } from "../roots/root.js";
import type { declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { BaseRange, type BaseRangeInner, type LimitSchemaValue, type UnknownNormalizedRangeSchema } from "./range.js";
export interface AfterInner extends BaseRangeInner {
    rule: Date;
}
export interface NormalizedAfterSchema extends UnknownNormalizedRangeSchema {
    rule: LimitSchemaValue;
}
export type AfterSchema = NormalizedAfterSchema | LimitSchemaValue;
export interface AfterDeclaration extends declareNode<{
    kind: "after";
    schema: AfterSchema;
    normalizedSchema: NormalizedAfterSchema;
    inner: AfterInner;
    prerequisite: Date;
    errorContext: AfterInner;
}> {
}
export declare const afterImplementation: nodeImplementationOf<AfterDeclaration>;
export declare class AfterNode extends BaseRange<AfterDeclaration> {
    impliedBasis: BaseRoot;
    traverseAllows: TraverseAllows<Date>;
}
