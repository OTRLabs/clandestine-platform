import type { mutable, requireKeys, show } from "@ark/util";
import type { Ark } from "./keywords/keywords.js";
import type { IntrinsicKeywords, RawRootScope } from "./scope.js";
import type { ActualWriter, ArkErrorCode, ExpectedWriter, MessageWriter, ProblemWriter } from "./shared/errors.js";
import { type DescriptionWriter, type NodeKind } from "./shared/implement.js";
declare global {
    export interface ArkEnv {
        $(): Ark;
        meta(): {};
        preserve(): never;
        registry(): {
            ambient: RawRootScope;
            intrinsic: IntrinsicKeywords;
            config: ArkConfig;
            defaultConfig: ResolvedArkConfig;
        };
    }
    export namespace ArkEnv {
        type $ = ReturnType<ArkEnv["$"]>;
        type meta = ReturnType<ArkEnv["meta"]>;
        type preserve = ReturnType<ArkEnv["preserve"]>;
    }
}
type nodeConfigForKind<kind extends NodeKind> = Readonly<show<{
    description?: DescriptionWriter<kind>;
} & (kind extends ArkErrorCode ? {
    expected?: ExpectedWriter<kind>;
    actual?: ActualWriter<kind>;
    problem?: ProblemWriter<kind>;
    message?: MessageWriter<kind>;
} : {})>>;
type NodeConfigsByKind = {
    [kind in NodeKind]: nodeConfigForKind<kind>;
};
export type NodeConfig<kind extends NodeKind = NodeKind> = NodeConfigsByKind[kind];
type UnknownNodeConfig = {
    description?: DescriptionWriter;
    expected?: ExpectedWriter;
    actual?: ActualWriter;
    problem?: ProblemWriter;
    message?: MessageWriter;
};
export type ResolvedUnknownNodeConfig = requireKeys<UnknownNodeConfig, "description">;
export declare const configure: (config: ArkConfig) => ArkConfig;
export declare const mergeConfigs: (base: ArkConfig, extensions: ArkConfig) => mutable<ArkConfig>;
export interface ArkConfig extends Partial<Readonly<NodeConfigsByKind>> {
    jitless?: boolean;
}
type resolveConfig<config extends ArkConfig> = {
    [k in keyof config]-?: k extends NodeKind ? Required<config[k]> : config[k];
};
export type ResolvedArkConfig = resolveConfig<ArkConfig>;
export declare const extendConfig: (base: ArkConfig, extension: ArkConfig | undefined) => ArkConfig;
export declare const resolveConfig: (config: ArkConfig | undefined) => ResolvedArkConfig;
export {};
