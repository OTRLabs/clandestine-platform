import { RawPrimitiveConstraint, writeInvalidOperandMessage } from "../constraint.js";
import type { BaseRoot, Root } from "../roots/root.js";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
export interface DivisorInner extends BaseMeta {
    readonly rule: number;
}
export type DivisorSchema = DivisorInner | number;
export interface DivisorDeclaration extends declareNode<{
    kind: "divisor";
    schema: DivisorSchema;
    normalizedSchema: DivisorInner;
    inner: DivisorInner;
    prerequisite: number;
    errorContext: DivisorInner;
}> {
}
export declare const divisorImplementation: nodeImplementationOf<DivisorDeclaration>;
export declare class DivisorNode extends RawPrimitiveConstraint<DivisorDeclaration> {
    traverseAllows: TraverseAllows<number>;
    readonly compiledCondition: string;
    readonly compiledNegation: string;
    readonly impliedBasis: BaseRoot;
    readonly expression: string;
}
export declare const writeIndivisibleMessage: <node extends Root>(t: node) => writeIndivisibleMessage<node>;
export type writeIndivisibleMessage<node extends Root> = writeInvalidOperandMessage<"divisor", node>;
