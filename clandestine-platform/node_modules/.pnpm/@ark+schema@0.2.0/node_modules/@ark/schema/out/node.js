var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { Callable, appendUnique, cached, flatMorph, includes, isArray, isEmptyObject, throwError } from "@ark/util";
import { basisKinds, constraintKinds, precedenceOfKind, refinementKinds, rootKinds, structuralKinds } from "./shared/implement.js";
import { TraversalContext } from "./shared/traversal.js";
import { isNode, pathToPropString } from "./shared/utils.js";
let BaseNode = (() => {
    let _classSuper = Callable;
    let _instanceExtraInitializers = [];
    let _get_description_decorators;
    let _get_shallowReferences_decorators;
    let _get_shallowMorphs_decorators;
    let _get_flatRefs_decorators;
    let _get_in_decorators;
    let _get_out_decorators;
    return class BaseNode extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _get_description_decorators = [cached];
            _get_shallowReferences_decorators = [cached];
            _get_shallowMorphs_decorators = [cached];
            _get_flatRefs_decorators = [cached];
            _get_in_decorators = [cached];
            _get_out_decorators = [cached];
            __esDecorate(this, null, _get_description_decorators, { kind: "getter", name: "description", static: false, private: false, access: { has: obj => "description" in obj, get: obj => obj.description }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_shallowReferences_decorators, { kind: "getter", name: "shallowReferences", static: false, private: false, access: { has: obj => "shallowReferences" in obj, get: obj => obj.shallowReferences }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_shallowMorphs_decorators, { kind: "getter", name: "shallowMorphs", static: false, private: false, access: { has: obj => "shallowMorphs" in obj, get: obj => obj.shallowMorphs }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_flatRefs_decorators, { kind: "getter", name: "flatRefs", static: false, private: false, access: { has: obj => "flatRefs" in obj, get: obj => obj.flatRefs }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_in_decorators, { kind: "getter", name: "in", static: false, private: false, access: { has: obj => "in" in obj, get: obj => obj.in }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_out_decorators, { kind: "getter", name: "out", static: false, private: false, access: { has: obj => "out" in obj, get: obj => obj.out }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        attachments = __runInitializers(this, _instanceExtraInitializers);
        $;
        constructor(attachments, $) {
            super(
            // pipedFromCtx allows us internally to reuse TraversalContext
            // through pipes and keep track of piped paths. It is not exposed
            (data, pipedFromCtx) => {
                if (!this.includesMorph &&
                    !this.allowsRequiresContext &&
                    this.allows(data))
                    return data;
                if (pipedFromCtx) {
                    this.traverseApply(data, pipedFromCtx);
                    return pipedFromCtx.data;
                }
                const ctx = new TraversalContext(data, this.$.resolvedConfig);
                this.traverseApply(data, ctx);
                return ctx.finalize();
            }, { attach: attachments });
            this.attachments = attachments;
            this.$ = $;
        }
        bindScope($) {
            if (this.$ === $)
                return this;
            return new this.constructor(this.attachments, $);
        }
        includesMorph = this.kind === "morph" ||
            (this.hasKind("optional") && this.hasDefault()) ||
            (this.hasKind("structure") && this.undeclared === "delete") ||
            this.children.some(child => child.includesMorph);
        // if a predicate accepts exactly one arg, we can safely skip passing context
        allowsRequiresContext = (this.hasKind("predicate") && this.inner.predicate.length !== 1) ||
            this.kind === "alias" ||
            this.children.some(child => child.allowsRequiresContext);
        referencesById = this.children.reduce((result, child) => Object.assign(result, child.referencesById), { [this.id]: this });
        get description() {
            const writer = this.$?.resolvedConfig[this.kind].description ??
                $ark.config[this.kind]?.description ??
                $ark.defaultConfig[this.kind].description;
            return this.inner.description ?? writer(this);
        }
        // we don't cache this currently since it can be updated once a scope finishes
        // resolving cyclic references, although it may be possible to ensure it is cached safely
        get references() {
            return Object.values(this.referencesById).filter(ref => !ref.id.startsWith("this"));
        }
        get shallowReferences() {
            return this.hasKind("structure") ?
                [this, ...this.children]
                : this.children.reduce((acc, child) => appendUniqueNodes(acc, child.shallowReferences), [this]);
        }
        get shallowMorphs() {
            return this.shallowReferences
                .filter(n => n.hasKind("morph"))
                .sort((l, r) => (l.expression < r.expression ? -1 : 1));
        }
        // overriden by structural kinds so that only the root at each path is added
        get flatRefs() {
            return this.children
                .reduce((acc, child) => appendUniqueFlatRefs(acc, child.flatRefs), [])
                .sort((l, r) => l.path.length > r.path.length ? 1
                : l.path.length < r.path.length ? -1
                    : l.propString > r.propString ? 1
                        : l.propString < r.propString ? -1
                            : l.node.expression < r.node.expression ? -1
                                : 1);
        }
        precedence = precedenceOfKind(this.kind);
        jit = false;
        allows = (data) => {
            if (this.allowsRequiresContext) {
                return this.traverseAllows(data, new TraversalContext(data, this.$.resolvedConfig));
            }
            return this.traverseAllows(data);
        };
        traverse(data) {
            return this(data);
        }
        get in() {
            return this.getIo("in");
        }
        get out() {
            return this.getIo("out");
        }
        // Should be refactored to use transform
        // https://github.com/arktypeio/arktype/issues/1020
        getIo(kind) {
            if (!this.includesMorph)
                return this;
            const ioInner = {};
            for (const [k, v] of this.entries) {
                const keySchemaImplementation = this.impl.keys[k];
                if (keySchemaImplementation.meta)
                    continue;
                if (keySchemaImplementation.child) {
                    const childValue = v;
                    ioInner[k] =
                        isArray(childValue) ?
                            childValue.map(child => child[kind])
                            : childValue[kind];
                }
                else
                    ioInner[k] = v;
            }
            return this.$.node(this.kind, ioInner);
        }
        toJSON() {
            return this.json;
        }
        toString() {
            return this.expression;
        }
        equals(other) {
            return this.typeHash === other.typeHash;
        }
        assertHasKind(kind) {
            if (!this.kind === kind)
                throwError(`${this.kind} node was not of asserted kind ${kind}`);
            return this;
        }
        hasKind(kind) {
            return this.kind === kind;
        }
        isBasis() {
            return includes(basisKinds, this.kind);
        }
        isConstraint() {
            return includes(constraintKinds, this.kind);
        }
        isStructural() {
            return includes(structuralKinds, this.kind);
        }
        isRefinement() {
            return includes(refinementKinds, this.kind);
        }
        isRoot() {
            return includes(rootKinds, this.kind);
        }
        hasUnit(value) {
            return this.hasKind("unit") && this.allows(value);
        }
        hasOpenIntersection() {
            return this.impl.intersectionIsOpen;
        }
        get nestableExpression() {
            return this.expression;
        }
        firstReference(filter) {
            return this.references.find(n => n !== this && filter(n));
        }
        firstReferenceOrThrow(filter) {
            return (this.firstReference(filter) ??
                throwError(`${this.id} had no references matching predicate ${filter}`));
        }
        firstReferenceOfKind(kind) {
            return this.firstReference(node => node.hasKind(kind));
        }
        firstReferenceOfKindOrThrow(kind) {
            return (this.firstReference(node => node.kind === kind) ??
                throwError(`${this.id} had no ${kind} references`));
        }
        transform(mapper, opts) {
            return this._transform(mapper, {
                ...opts,
                seen: {},
                path: [],
                parseOptions: {
                    prereduced: opts?.prereduced ?? false
                }
            });
        }
        _transform(mapper, ctx) {
            const $ = ctx.bindScope?.internal ?? this.$;
            if (ctx.seen[this.id])
                // Cyclic handling needs to be made more robust
                // https://github.com/arktypeio/arktype/issues/944
                return this.$.lazilyResolve(ctx.seen[this.id]);
            if (ctx.shouldTransform?.(this, ctx) === false)
                return this;
            let transformedNode;
            ctx.seen[this.id] = () => transformedNode;
            const innerWithTransformedChildren = flatMorph(this.inner, (k, v) => {
                if (!this.impl.keys[k].child)
                    return [k, v];
                const children = v;
                if (!isArray(children)) {
                    const transformed = children._transform(mapper, ctx);
                    return transformed ? [k, transformed] : [];
                }
                // if the value was previously explicitly set to an empty list,
                // (e.g. branches for `never`), ensure it is not pruned
                if (children.length === 0)
                    return [k, v];
                const transformed = children.flatMap(n => {
                    const transformedChild = n._transform(mapper, ctx);
                    return transformedChild ?? [];
                });
                return transformed.length ? [k, transformed] : [];
            });
            delete ctx.seen[this.id];
            const transformedInner = mapper(this.kind, innerWithTransformedChildren, ctx);
            if (transformedInner === null)
                return null;
            if (isNode(transformedInner))
                return (transformedNode = transformedInner);
            if (isEmptyObject(transformedInner) &&
                // if inner was previously an empty object (e.g. unknown) ensure it is not pruned
                !isEmptyObject(this.inner))
                return null;
            if ((this.kind === "required" ||
                this.kind === "optional" ||
                this.kind === "index") &&
                !("value" in transformedInner))
                return null;
            if (this.kind === "morph") {
                ;
                transformedInner.in ??= $ark.intrinsic
                    .unknown;
            }
            return (transformedNode = $.node(this.kind, transformedInner, ctx.parseOptions));
        }
        configureShallowDescendants(configOrDescription) {
            const config = typeof configOrDescription === "string" ?
                { description: configOrDescription }
                : configOrDescription;
            return this.transform((kind, inner) => ({ ...inner, ...config }), {
                shouldTransform: node => node.kind !== "structure"
            });
        }
    };
})();
export { BaseNode };
export const typePathToPropString = (path) => pathToPropString(path, {
    stringifyNonKey: node => node.expression
});
export const flatRef = (path, node) => ({
    path,
    node,
    propString: typePathToPropString(path)
});
export const flatRefsAreEqual = (l, r) => l.propString === r.propString && l.node.equals(r.node);
export const appendUniqueFlatRefs = (existing, refs) => appendUnique(existing, refs, {
    isEqual: flatRefsAreEqual
});
export const appendUniqueNodes = (existing, refs) => appendUnique(existing, refs, {
    isEqual: (l, r) => l.equals(r)
});
