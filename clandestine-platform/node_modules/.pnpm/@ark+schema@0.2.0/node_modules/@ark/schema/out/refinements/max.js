import { Disjoint } from "../shared/disjoint.js";
import { implementNode } from "../shared/implement.js";
import { BaseRange, parseExclusiveKey } from "./range.js";
export const maxImplementation = implementNode({
    kind: "max",
    collapsibleKey: "rule",
    hasAssociatedError: true,
    keys: {
        rule: {},
        exclusive: parseExclusiveKey
    },
    normalize: schema => typeof schema === "number" ? { rule: schema } : schema,
    defaults: {
        description: node => `${node.exclusive ? "less than" : "at most"} ${node.rule}`
    },
    intersections: {
        max: (l, r) => (l.isStricterThan(r) ? l : r),
        min: (max, min, ctx) => max.overlapsRange(min) ?
            max.overlapIsUnit(min) ?
                ctx.$.node("unit", { unit: max.rule })
                : null
            : Disjoint.init("range", max, min)
    }
});
export class MaxNode extends BaseRange {
    impliedBasis = $ark.intrinsic.number;
    traverseAllows = this.exclusive ? data => data < this.rule : data => data <= this.rule;
}
