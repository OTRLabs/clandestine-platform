var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { Callable, cached, flatMorph, isThunk, throwParseError } from "@ark/util";
import { arkKind } from "./shared/utils.js";
export const parseGeneric = (paramDefs, bodyDef, $) => new GenericRoot(paramDefs, bodyDef, $, $);
export class LazyGenericRoot extends Callable {
}
let GenericRoot = (() => {
    let _classSuper = Callable;
    let _instanceExtraInitializers = [];
    let _get_params_decorators;
    let _get_names_decorators;
    let _get_constraints_decorators;
    let _get_baseInstantiation_decorators;
    return class GenericRoot extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _get_params_decorators = [cached];
            _get_names_decorators = [cached];
            _get_constraints_decorators = [cached];
            _get_baseInstantiation_decorators = [cached];
            __esDecorate(this, null, _get_params_decorators, { kind: "getter", name: "params", static: false, private: false, access: { has: obj => "params" in obj, get: obj => obj.params }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_names_decorators, { kind: "getter", name: "names", static: false, private: false, access: { has: obj => "names" in obj, get: obj => obj.names }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_constraints_decorators, { kind: "getter", name: "constraints", static: false, private: false, access: { has: obj => "constraints" in obj, get: obj => obj.constraints }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_baseInstantiation_decorators, { kind: "getter", name: "baseInstantiation", static: false, private: false, access: { has: obj => "baseInstantiation" in obj, get: obj => obj.baseInstantiation }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        paramDefs = __runInitializers(this, _instanceExtraInitializers);
        bodyDef;
        _$;
        _arg$;
        [arkKind] = "generic";
        constructor(paramDefs, bodyDef, _$, _arg$) {
            super((...args) => {
                const argNodes = flatMorph(this.names, (i, name) => {
                    const arg = this.arg$.parseRoot(args[i]);
                    if (!arg.extends(this.constraints[i])) {
                        throwParseError(writeUnsatisfiedParameterConstraintMessage(name, this.constraints[i].expression, arg.expression));
                    }
                    return [name, arg];
                });
                if (bodyDef instanceof LazyGenericRoot)
                    return this.$.parseRoot(bodyDef(argNodes));
                return this.$.parseRoot(bodyDef, { args: argNodes });
            });
            this.paramDefs = paramDefs;
            this.bodyDef = bodyDef;
            this._$ = _$;
            this._arg$ = _arg$;
            // if this is a standalone generic, validate its base constraints right away
            if (!isThunk(this._$))
                this.validateBaseInstantiation();
            // if it's part of a scope, scope.export will be resposible for invoking
            // validateBaseInstantiation on export() once everything is resolvable
        }
        get $() {
            return isThunk(this._$) ? this._$() : this._$;
        }
        get arg$() {
            return isThunk(this._arg$) ? this._arg$() : this._arg$;
        }
        bindScope($) {
            if (this.arg$ === $)
                return this;
            return new GenericRoot(this.params, this.bodyDef, this.$, $);
        }
        get params() {
            return this.paramDefs.map((param) => typeof param === "string" ?
                [param, $ark.intrinsic.unknown]
                : [param[0], this.$.parseRoot(param[1])]);
        }
        get names() {
            return this.params.map(e => e[0]);
        }
        get constraints() {
            return this.params.map(e => e[1]);
        }
        get baseInstantiation() {
            return this(...this.constraints);
        }
        validateBaseInstantiation() {
            this.baseInstantiation;
            return this;
        }
        get internal() {
            return this;
        }
        get references() {
            return this.baseInstantiation.internal.references;
        }
    };
})();
export { GenericRoot };
export const writeUnsatisfiedParameterConstraintMessage = (name, constraint, arg) => `${name} must be assignable to ${constraint} (was ${arg})`;
