import type { BaseConstraint } from "../constraint.js";
import type { BoundKind, nodeImplementationOf } from "../shared/implement.js";
import { type AfterDeclaration, AfterNode } from "./after.js";
import { type BeforeDeclaration, BeforeNode } from "./before.js";
import { type ExactLengthDeclaration, ExactLengthNode } from "./exactLength.js";
import { type MaxDeclaration, MaxNode } from "./max.js";
import { type MaxLengthDeclaration, MaxLengthNode } from "./maxLength.js";
import { type MinDeclaration, MinNode } from "./min.js";
import { type MinLengthDeclaration, MinLengthNode } from "./minLength.js";
export interface BoundDeclarations {
    min: MinDeclaration;
    max: MaxDeclaration;
    minLength: MinLengthDeclaration;
    maxLength: MaxLengthDeclaration;
    exactLength: ExactLengthDeclaration;
    after: AfterDeclaration;
    before: BeforeDeclaration;
}
export interface BoundNodesByKind {
    min: MinNode;
    max: MaxNode;
    minLength: MinLengthNode;
    maxLength: MaxLengthNode;
    exactLength: ExactLengthNode;
    after: AfterNode;
    before: BeforeNode;
}
export type boundImplementationsByKind = {
    [k in BoundKind]: nodeImplementationOf<BoundDeclarations[k]>;
};
export declare const boundImplementationsByKind: boundImplementationsByKind;
export declare const boundClassesByKind: Record<BoundKind, typeof BaseConstraint<any>>;
