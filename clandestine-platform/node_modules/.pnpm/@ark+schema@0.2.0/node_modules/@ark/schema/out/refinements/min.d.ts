import type { BaseRoot } from "../roots/root.js";
import type { declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { BaseRange, type BaseRangeInner, type UnknownNormalizedRangeSchema } from "./range.js";
export interface MinInner extends BaseRangeInner {
    rule: number;
}
export interface NormalizedMinRoot extends UnknownNormalizedRangeSchema {
    rule: number;
}
export type MinSchema = NormalizedMinRoot | number;
export interface MinDeclaration extends declareNode<{
    kind: "min";
    schema: MinSchema;
    normalizedSchema: NormalizedMinRoot;
    inner: MinInner;
    prerequisite: number;
    errorContext: MinInner;
}> {
}
export declare const minImplementation: nodeImplementationOf<MinDeclaration>;
export declare class MinNode extends BaseRange<MinDeclaration> {
    readonly impliedBasis: BaseRoot;
    traverseAllows: TraverseAllows<number>;
}
