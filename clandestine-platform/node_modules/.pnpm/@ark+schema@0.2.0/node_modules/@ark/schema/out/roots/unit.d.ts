import { type Domain, type JsonPrimitive, type Key, type array } from "@ark/util";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { RawBasis } from "./basis.js";
export type UnitSchema<value = unknown> = UnitInner<value>;
export interface UnitInner<value = unknown> extends BaseMeta {
    readonly unit: value;
}
export interface UnitDeclaration extends declareNode<{
    kind: "unit";
    schema: UnitSchema;
    normalizedSchema: UnitSchema;
    inner: UnitInner;
    errorContext: UnitInner;
}> {
}
export declare const unitImplementation: nodeImplementationOf<UnitDeclaration>;
export declare class UnitNode extends RawBasis<UnitDeclaration> {
    compiledValue: JsonPrimitive;
    serializedValue: JsonPrimitive;
    literalKeys: array<Key>;
    compiledCondition: string;
    compiledNegation: string;
    expression: string;
    domain: Domain;
    get shortDescription(): string;
    traverseAllows: TraverseAllows;
}
