import type { BaseRoot } from "../roots/root.js";
import type { declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { BaseRange, type BaseRangeInner, type LengthBoundableData, type UnknownNormalizedRangeSchema } from "./range.js";
export interface MaxLengthInner extends BaseRangeInner {
    rule: number;
}
export interface NormalizedMaxLengthSchema extends UnknownNormalizedRangeSchema {
    rule: number;
}
export type MaxLengthSchema = NormalizedMaxLengthSchema | number;
export interface MaxLengthDeclaration extends declareNode<{
    kind: "maxLength";
    schema: MaxLengthSchema;
    normalizedSchema: NormalizedMaxLengthSchema;
    inner: MaxLengthInner;
    prerequisite: LengthBoundableData;
    errorContext: MaxLengthInner;
}> {
}
export declare const maxLengthImplementation: nodeImplementationOf<MaxLengthDeclaration>;
export declare class MaxLengthNode extends BaseRange<MaxLengthDeclaration> {
    readonly impliedBasis: BaseRoot;
    traverseAllows: TraverseAllows<LengthBoundableData>;
}
