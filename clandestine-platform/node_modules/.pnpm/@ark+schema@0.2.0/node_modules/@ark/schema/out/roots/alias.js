var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { append, cached, domainDescriptions } from "@ark/util";
import { Disjoint } from "../shared/disjoint.js";
import { implementNode } from "../shared/implement.js";
import { intersectNodes } from "../shared/intersections.js";
import { BaseRoot } from "./root.js";
import { defineRightwardIntersections } from "./utils.js";
let AliasNode = (() => {
    let _classSuper = BaseRoot;
    let _instanceExtraInitializers = [];
    let _get_resolution_decorators;
    return class AliasNode extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _get_resolution_decorators = [cached];
            __esDecorate(this, null, _get_resolution_decorators, { kind: "getter", name: "resolution", static: false, private: false, access: { has: obj => "resolution" in obj, get: obj => obj.resolution }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        expression = (__runInitializers(this, _instanceExtraInitializers), this.alias);
        structure = undefined;
        get resolution() {
            return this.resolve?.() ?? this.$.resolveRoot(this.alias);
        }
        rawKeyOf() {
            return this.resolution.keyof();
        }
        get shortDescription() {
            return domainDescriptions.object;
        }
        traverseAllows = (data, ctx) => {
            const seen = ctx.seen[this.id];
            if (seen?.includes(data))
                return true;
            ctx.seen[this.id] = append(seen, data);
            return this.resolution.traverseAllows(data, ctx);
        };
        traverseApply = (data, ctx) => {
            const seen = ctx.seen[this.id];
            if (seen?.includes(data))
                return;
            ctx.seen[this.id] = append(seen, data);
            this.resolution.traverseApply(data, ctx);
        };
        compile(js) {
            js.if(`ctx.seen.${this.id}?.includes(data)`, () => js.return(true));
            js.line(`ctx.seen.${this.id} ??= []`).line(`ctx.seen.${this.id}.push(data)`);
            js.return(js.invoke(this.resolution));
        }
    };
})();
export { AliasNode };
export const normalizeAliasSchema = (schema) => typeof schema === "string" ? { alias: schema.slice(1) } : schema;
export const aliasImplementation = implementNode({
    kind: "alias",
    hasAssociatedError: false,
    collapsibleKey: "alias",
    keys: {
        alias: {
            serialize: schema => `$${schema}`
        },
        resolve: {}
    },
    normalize: normalizeAliasSchema,
    defaults: {
        description: node => node.alias
    },
    intersections: {
        alias: (l, r, ctx) => ctx.$.lazilyResolve(() => neverIfDisjoint(intersectNodes(l.resolution, r.resolution, ctx)), `${l.alias}${ctx.pipe ? "|>" : "&"}${r.alias}`),
        ...defineRightwardIntersections("alias", (l, r, ctx) => ctx.$.lazilyResolve(() => neverIfDisjoint(intersectNodes(l.resolution, r, ctx)), `${l.alias}${ctx.pipe ? "|>" : "&"}${r.alias}`))
    }
});
const neverIfDisjoint = (result) => result instanceof Disjoint ? $ark.intrinsic.never : result;
