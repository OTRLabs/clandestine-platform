import type { declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import { BaseProp, type BasePropDeclaration, type BasePropInner, type BasePropSchema } from "./prop.js";
export interface OptionalSchema extends BasePropSchema {
    default?: unknown;
}
export interface OptionalInner extends BasePropInner {
    default?: unknown;
}
export type Default<v = any> = ["=", v];
export type DefaultableAst<t = any, v = any> = (In?: t) => Default<v>;
export type OptionalDeclaration = declareNode<BasePropDeclaration<"optional"> & {
    schema: OptionalSchema;
    normalizedSchema: OptionalSchema;
    inner: OptionalInner;
}>;
export declare const optionalImplementation: nodeImplementationOf<OptionalDeclaration>;
export declare class OptionalNode extends BaseProp<"optional"> {
    expression: string;
}
