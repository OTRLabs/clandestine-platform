import { type Key } from "@ark/util";
import { BaseConstraint } from "../constraint.js";
import type { Node, RootSchema } from "../kinds.js";
import { type DeepNodeTransformContext, type DeepNodeTransformation, type FlatRef } from "../node.js";
import type { BaseRoot } from "../roots/root.js";
import type { NodeCompiler } from "../shared/compile.js";
import type { BaseMeta } from "../shared/declare.js";
import { Disjoint } from "../shared/disjoint.js";
import type { IntersectionContext, RootKind } from "../shared/implement.js";
import type { TraverseAllows, TraverseApply } from "../shared/traversal.js";
import type { OptionalDeclaration, OptionalNode } from "./optional.js";
import type { RequiredDeclaration } from "./required.js";
export type PropKind = "required" | "optional";
export type PropNode = Node<PropKind>;
export interface BasePropSchema extends BaseMeta {
    readonly key: Key;
    readonly value: RootSchema;
}
export interface BasePropInner extends BasePropSchema {
    readonly value: BaseRoot;
}
export type BasePropDeclaration<kind extends PropKind = PropKind> = {
    kind: kind;
    prerequisite: object;
    intersectionIsOpen: true;
    childKind: RootKind;
};
export declare const intersectProps: (l: Node<PropKind>, r: Node<PropKind>, ctx: IntersectionContext) => Node<PropKind> | Disjoint | null;
export declare abstract class BaseProp<kind extends PropKind = PropKind> extends BaseConstraint<kind extends "required" ? RequiredDeclaration : OptionalDeclaration> {
    required: boolean;
    optional: boolean;
    impliedBasis: BaseRoot;
    serializedKey: string;
    compiledKey: string;
    get flatRefs(): FlatRef[];
    protected _transform(mapper: DeepNodeTransformation, ctx: DeepNodeTransformContext): import("../node.js").BaseNode<import("../shared/declare.js").RawNodeDeclaration> | null;
    private defaultValueMorphs;
    private defaultValueMorphsReference;
    hasDefault(): this is OptionalNode & {
        default: unknown;
    };
    traverseAllows: TraverseAllows<object>;
    traverseApply: TraverseApply<object>;
    compile(js: NodeCompiler): void;
}
