import { type array, type satisfy } from "@ark/util";
import { BaseConstraint } from "../constraint.js";
import type { RootSchema } from "../kinds.js";
import { type DeepNodeTransformContext, type DeepNodeTransformation, type FlatRef } from "../node.js";
import type { MaxLengthNode } from "../refinements/maxLength.js";
import type { MinLengthNode } from "../refinements/minLength.js";
import type { BaseRoot } from "../roots/root.js";
import type { NodeCompiler } from "../shared/compile.js";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type RootKind, type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows, TraverseApply } from "../shared/traversal.js";
export interface NormalizedSequenceSchema extends BaseMeta {
    readonly prefix?: array<RootSchema>;
    readonly optionals?: array<RootSchema>;
    readonly variadic?: RootSchema;
    readonly minVariadicLength?: number;
    readonly postfix?: array<RootSchema>;
}
export type SequenceSchema = NormalizedSequenceSchema | RootSchema;
export interface SequenceInner extends BaseMeta {
    readonly prefix?: array<BaseRoot>;
    readonly optionals?: array<BaseRoot>;
    readonly variadic?: BaseRoot;
    readonly minVariadicLength?: number;
    readonly postfix?: array<BaseRoot>;
}
export interface SequenceDeclaration extends declareNode<{
    kind: "sequence";
    schema: SequenceSchema;
    normalizedSchema: NormalizedSequenceSchema;
    inner: SequenceInner;
    prerequisite: array;
    reducibleTo: "sequence";
    childKind: RootKind;
}> {
}
export declare const sequenceImplementation: nodeImplementationOf<SequenceDeclaration>;
export declare class SequenceNode extends BaseConstraint<SequenceDeclaration> {
    impliedBasis: BaseRoot;
    prefix: array<BaseRoot>;
    optionals: array<BaseRoot>;
    prevariadic: array<BaseRoot>;
    postfix: array<BaseRoot>;
    variadicOrPostfix: array<BaseRoot>;
    isVariadicOnly: boolean;
    minVariadicLength: number;
    minLength: number;
    minLengthNode: MinLengthNode | null;
    maxLength: number | null;
    maxLengthNode: MaxLengthNode | null;
    impliedSiblings: array<MaxLengthNode | MinLengthNode>;
    protected childAtIndex(data: array, index: number): BaseRoot;
    traverseAllows: TraverseAllows<array>;
    traverseApply: TraverseApply<array>;
    get flatRefs(): FlatRef[];
    get element(): BaseRoot;
    compile(js: NodeCompiler): void;
    protected _transform(mapper: DeepNodeTransformation, ctx: DeepNodeTransformContext): import("../node.js").BaseNode<import("../shared/declare.js").RawNodeDeclaration> | null;
    tuple: SequenceTuple;
    expression: string;
}
export declare const postfixFollowingOptionalMessage = "A postfix required element cannot follow an optional element";
export type postfixFollowingOptionalMessage = typeof postfixFollowingOptionalMessage;
export declare const postfixWithoutVariadicMessage = "A postfix element requires a variadic element";
export type postfixWithoutVariadicMessage = typeof postfixWithoutVariadicMessage;
export type SequenceElementKind = satisfy<keyof SequenceInner, "prefix" | "optionals" | "variadic" | "postfix">;
export type SequenceElement = {
    kind: SequenceElementKind;
    node: BaseRoot;
};
export type SequenceTuple = array<SequenceElement>;
