var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { RawRootScope, hasArkKind, parseGeneric } from "@ark/schema";
import { bound, domainOf, hasDomain, isThunk, throwParseError } from "@ark/util";
import { parseGenericParams } from "./generic.js";
import { createMatchParser } from "./match.js";
import { parseObject, writeBadDefinitionTypeMessage } from "./parser/definition.js";
import { DynamicState } from "./parser/string/reduce/dynamic.js";
import { writeUnexpectedCharacterMessage } from "./parser/string/shift/operator/operator.js";
import { Scanner } from "./parser/string/shift/scanner.js";
import { fullStringParse } from "./parser/string/string.js";
import { RawTypeParser } from "./type.js";
export const scope = ((def, config = {}) => new RawScope(def, config));
let RawScope = (() => {
    let _classSuper = RawRootScope;
    let _instanceExtraInitializers = [];
    let _parseRoot_decorators;
    return class RawScope extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _parseRoot_decorators = [bound];
            __esDecorate(this, null, _parseRoot_decorators, { kind: "method", name: "parseRoot", static: false, private: false, access: { has: obj => "parseRoot" in obj, get: obj => obj.parseRoot }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        parseCache = (__runInitializers(this, _instanceExtraInitializers), {});
        constructor(def, config) {
            super(def, config);
        }
        type = new RawTypeParser(this);
        match = createMatchParser(this);
        declare = (() => ({
            type: this.type
        })).bind(this);
        define = ((def) => def).bind(this);
        preparseAlias(k, v) {
            const firstParamIndex = k.indexOf("<");
            if (firstParamIndex === -1)
                return [k, v];
            if (k.at(-1) !== ">") {
                throwParseError(`'>' must be the last character of a generic declaration in a scope`);
            }
            const name = k.slice(0, firstParamIndex);
            const paramString = k.slice(firstParamIndex + 1, -1);
            return [
                name,
                // use a thunk definition for the generic so that we can parse
                // constraints within the current scope
                () => {
                    const params = parseGenericParams(paramString, {
                        $: this,
                        args: {}
                    });
                    const generic = parseGeneric(params, v, this);
                    return generic;
                }
            ];
        }
        preparseRoot(def) {
            if (isThunk(def) && !hasArkKind(def, "generic"))
                return def();
            return def;
        }
        parseRoot(def, opts = {}) {
            const node = this.parse(def, Object.assign(this.finalizeRootArgs(opts, () => node), { $: this })).bindScope(this);
            return node;
        }
        parse(def, ctx, defaultable = false) {
            if (typeof def === "string") {
                if (ctx.args && Object.keys(ctx.args).some(k => def.includes(k))) {
                    // we can only rely on the cache if there are no contextual
                    // resolutions like "this" or generic args
                    return this.parseString(def, ctx, defaultable);
                }
                const contextKey = `${def}${defaultable}`;
                return (this.parseCache[contextKey] ??= this.parseString(def, ctx, defaultable));
            }
            return hasDomain(def, "object") ?
                parseObject(def, ctx)
                : throwParseError(writeBadDefinitionTypeMessage(domainOf(def)));
        }
        parseString(def, ctx, defaultable) {
            const aliasResolution = this.maybeResolveRoot(def);
            if (aliasResolution)
                return aliasResolution;
            const aliasArrayResolution = def.endsWith("[]") ?
                this.maybeResolveRoot(def.slice(0, -2))?.array()
                : undefined;
            if (aliasArrayResolution)
                return aliasArrayResolution;
            const s = new DynamicState(new Scanner(def), ctx, defaultable);
            const node = fullStringParse(s);
            if (s.finalizer === ">")
                throwParseError(writeUnexpectedCharacterMessage(">"));
            return node;
        }
    };
})();
export { RawScope };
export const writeShallowCycleErrorMessage = (name, seen) => `Alias '${name}' has a shallow resolution cycle: ${[...seen, name].join(":")}`;
