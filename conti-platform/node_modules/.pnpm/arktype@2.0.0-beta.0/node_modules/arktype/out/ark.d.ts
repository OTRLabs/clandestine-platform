import { type Ark, type ArkErrors, type inferred } from "@ark/schema";
import type { CastableBase } from "@ark/util";
import type { MatchParser } from "./match.js";
import type { Module } from "./module.js";
import { type Scope } from "./scope.js";
import type { DeclarationParser, DefinitionParser, Type, TypeParser } from "./type.js";
export declare const ambient: Scope<Ark>;
export declare const ark: Module<Ark>;
export declare const type: TypeParser<{}>;
export declare namespace type {
    type cast<t> = {
        [inferred]?: t;
    };
    type errors = ArkErrors;
    interface of<t, $ = {}> extends Type<t, $> {
    }
    interface infer<t extends Type<object>> extends CastableBase<t["infer"]> {
    }
    interface inferIn<t extends Type<object>> extends CastableBase<t["inferIn"]> {
    }
}
export declare const match: MatchParser<{}>;
export declare const define: DefinitionParser<{}>;
export declare const declare: DeclarationParser<{}>;
