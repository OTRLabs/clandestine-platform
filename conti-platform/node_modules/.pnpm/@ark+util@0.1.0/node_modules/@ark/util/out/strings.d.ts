export declare const capitalize: <s extends string>(s: s) => Capitalize<s>;
export type firstChar<s extends string> = s extends `${infer head}${string}` ? head : "";
export type charsAfterFirst<s extends string> = s extends `${string}${infer tail}` ? tail : "";
export type lastChar<s extends string> = s extends `${infer head}${infer tail}` ? tail extends "" ? head : lastChar<tail> : s;
export type charsBeforeLast<s extends string> = s extends `${infer head}${infer tail}` ? tail extends "" ? "" : `${head}${charsBeforeLast<tail>}` : "";
export declare const anchoredRegex: (regex: RegExp | string) => RegExp;
export declare const deanchoredRegex: (regex: RegExp | string) => RegExp;
export declare const anchoredSource: (regex: RegExp | string) => string;
export declare const deanchoredSource: (regex: RegExp | string) => string;
export declare const escapeToken = "\\";
export type EscapeToken = typeof escapeToken;
export declare const whiteSpaceTokens: {
    readonly " ": true;
    readonly "\n": true;
    readonly "\t": true;
};
export type WhiteSpaceToken = keyof typeof whiteSpaceTokens;
export type trim<s extends string> = trimEnd<trimStart<s>>;
export type trimStart<s extends string> = s extends `${WhiteSpaceToken}${infer tail}` ? trimEnd<tail> : s;
export type trimEnd<s extends string> = s extends `${infer init}${WhiteSpaceToken}` ? trimEnd<init> : s;
export type isStringLiteral<t> = [
    t
] extends [string] ? [
    string
] extends [t] ? false : Uppercase<t> extends Uppercase<Lowercase<t>> ? Lowercase<t> extends Lowercase<Uppercase<t>> ? true : false : false : false;
