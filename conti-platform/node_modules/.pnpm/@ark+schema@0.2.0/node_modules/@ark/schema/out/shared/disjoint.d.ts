import { type Key } from "@ark/util";
import type { Node } from "../kinds.js";
import type { BaseNode } from "../node.js";
import type { BaseRoot } from "../roots/root.js";
import type { PropKind } from "../structure/prop.js";
import type { BoundKind } from "./implement.js";
export interface DisjointEntry<kind extends DisjointKind = DisjointKind> {
    kind: kind;
    l: OperandsByDisjointKind[kind];
    r: OperandsByDisjointKind[kind];
    path: Key[];
    optional: boolean;
}
type OperandsByDisjointKind = {
    domain: Node<"domain">;
    unit: Node<"unit">;
    proto: Node<"proto">;
    presence: BaseRoot;
    range: Node<BoundKind>;
    assignability: BaseNode;
    union: readonly BaseRoot[];
};
export type DisjointEntryContext = {
    path?: Key[];
    optional?: true;
};
export declare class Disjoint extends Array<DisjointEntry> {
    static init<kind extends DisjointKind>(kind: kind, l: OperandsByDisjointKind[kind], r: OperandsByDisjointKind[kind], ctx?: DisjointEntryContext): Disjoint;
    add<kind extends DisjointKind>(kind: kind, l: OperandsByDisjointKind[kind], r: OperandsByDisjointKind[kind], ctx?: DisjointEntryContext): Disjoint;
    describeReasons(): string;
    throw(): never;
    invert(): Disjoint;
    withPrefixKey(key: string | symbol, kind: PropKind): Disjoint;
}
export type DisjointKind = keyof OperandsByDisjointKind;
export {};
