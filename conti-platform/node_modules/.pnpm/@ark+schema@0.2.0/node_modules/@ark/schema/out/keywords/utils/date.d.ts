type DayDelimiter = "." | "/" | "-";
type DayPart = DayPatterns[PartKey];
type PartKey = keyof DayPatterns;
type DayPatterns = {
    y: "yy" | "yyyy";
    m: "mm" | "m";
    d: "dd" | "d";
};
type fragment<part extends DayPart, delimiter extends DayDelimiter> = `${delimiter}${part}` | "";
export type DayPattern<delimiter extends DayDelimiter = DayDelimiter> = delimiter extends unknown ? {
    [k1 in keyof DayPatterns]: {
        [k2 in Exclude<keyof DayPatterns, k1>]: `${DayPatterns[k1]}${fragment<DayPatterns[k2], delimiter>}${fragment<DayPatterns[Exclude<keyof DayPatterns, k1 | k2>], delimiter>}`;
    }[Exclude<keyof DayPatterns, k1>];
}[keyof DayPatterns] : never;
export type DateFormat = "iso8601" | DayPattern;
export type DateOptions = {
    format?: DateFormat;
};
export declare const tryParseDatePattern: (data: string, opts?: DateOptions) => Date | string;
export {};
