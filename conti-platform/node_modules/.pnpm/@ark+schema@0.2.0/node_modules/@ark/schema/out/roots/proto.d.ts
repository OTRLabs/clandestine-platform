import { type BuiltinObjectKind, type Constructor, type Key, type array } from "@ark/util";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { RawBasis } from "./basis.js";
export interface ProtoInner<proto extends Constructor = Constructor> extends BaseMeta {
    readonly proto: proto;
}
export type NormalizedProtoSchema<proto extends Constructor = Constructor> = ProtoInner<proto>;
export type ProtoReference = Constructor | BuiltinObjectKind;
export interface ExpandedProtoSchema<proto extends ProtoReference = ProtoReference> extends BaseMeta {
    readonly proto: proto;
}
export type ProtoSchema<proto extends ProtoReference = ProtoReference> = proto | ExpandedProtoSchema<proto>;
export interface ProtoDeclaration extends declareNode<{
    kind: "proto";
    schema: ProtoSchema;
    normalizedSchema: NormalizedProtoSchema;
    inner: ProtoInner;
    errorContext: ProtoInner;
}> {
}
export declare const protoImplementation: nodeImplementationOf<ProtoDeclaration>;
export declare class ProtoNode extends RawBasis<ProtoDeclaration> {
    builtinName: BuiltinObjectKind | null;
    serializedConstructor: string;
    compiledCondition: string;
    compiledNegation: string;
    literalKeys: array<Key>;
    traverseAllows: TraverseAllows;
    expression: string;
    readonly domain = "object";
    get shortDescription(): string;
}
