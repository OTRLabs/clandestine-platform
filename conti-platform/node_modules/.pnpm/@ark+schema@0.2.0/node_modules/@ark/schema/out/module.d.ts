import { DynamicBase, type anyOrNever } from "@ark/util";
import type { Root } from "./roots/root.js";
import { arkKind } from "./shared/utils.js";
export type PreparsedNodeResolution = {
    [arkKind]: "generic" | "module";
};
export declare class RootModule<exports extends object = {}> extends DynamicBase<exports> {
    get [arkKind](): "module";
}
type exportSchemaScope<$> = {
    [k in keyof $]: $[k] extends PreparsedNodeResolution ? [
        $[k]
    ] extends [anyOrNever] ? Root<$[k], $> : $[k] : Root<$[k], $>;
};
export declare const SchemaModule: new <$ = {}>(types: exportSchemaScope<$>) => SchemaModule<$>;
export interface SchemaModule<$ = {}> extends RootModule<exportSchemaScope<$>> {
}
export {};
