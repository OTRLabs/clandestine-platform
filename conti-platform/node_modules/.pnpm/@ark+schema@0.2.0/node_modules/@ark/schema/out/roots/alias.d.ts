import type { NodeCompiler } from "../shared/compile.js";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows, TraverseApply } from "../shared/traversal.js";
import { BaseRoot, type RawRootDeclaration } from "./root.js";
export interface AliasInner<alias extends string = string> extends BaseMeta {
    readonly alias: alias;
    readonly resolve?: () => BaseRoot;
}
export type AliasSchema<alias extends string = string> = `$${alias}` | AliasInner<alias>;
export interface AliasDeclaration extends declareNode<{
    kind: "alias";
    schema: AliasSchema;
    normalizedSchema: AliasInner;
    inner: AliasInner;
}> {
}
export declare class AliasNode extends BaseRoot<AliasDeclaration> {
    readonly expression: string;
    readonly structure: undefined;
    get resolution(): BaseRoot;
    rawKeyOf(): BaseRoot<RawRootDeclaration>;
    get shortDescription(): string;
    traverseAllows: TraverseAllows;
    traverseApply: TraverseApply;
    compile(js: NodeCompiler): void;
}
export declare const normalizeAliasSchema: (schema: AliasSchema) => AliasInner;
export declare const aliasImplementation: nodeImplementationOf<AliasDeclaration>;
