import type { BaseErrorContext, declareNode } from "../shared/declare.js";
import type { ArkErrorContextInput } from "../shared/errors.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import { BaseProp, type BasePropDeclaration, type BasePropInner, type BasePropSchema } from "./prop.js";
export interface RequiredErrorContext extends BaseErrorContext<"required"> {
    missingValueDescription: string;
}
export interface RequiredSchema extends BasePropSchema {
}
export interface RequiredInner extends BasePropInner {
}
export type RequiredDeclaration = declareNode<BasePropDeclaration<"required"> & {
    schema: RequiredSchema;
    normalizedSchema: RequiredSchema;
    inner: RequiredInner;
    errorContext: RequiredErrorContext;
}>;
export declare class RequiredNode extends BaseProp<"required"> {
    expression: string;
    errorContext: ArkErrorContextInput<"required">;
    compiledErrorContext: string;
}
export declare const requiredImplementation: nodeImplementationOf<RequiredDeclaration>;
