import type { BaseRoot } from "../roots/root.js";
import type { declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { BaseRange, type BaseRangeInner, type LimitSchemaValue, type UnknownNormalizedRangeSchema } from "./range.js";
export interface BeforeInner extends BaseRangeInner {
    rule: Date;
}
export interface NormalizedBeforeSchema extends UnknownNormalizedRangeSchema {
    rule: LimitSchemaValue;
}
export type BeforeSchema = NormalizedBeforeSchema | LimitSchemaValue;
export interface BeforeDeclaration extends declareNode<{
    kind: "before";
    schema: BeforeSchema;
    normalizedSchema: NormalizedBeforeSchema;
    inner: BeforeInner;
    prerequisite: Date;
    errorContext: BeforeInner;
}> {
}
export declare const beforeImplementation: nodeImplementationOf<BeforeDeclaration>;
export declare class BeforeNode extends BaseRange<BeforeDeclaration> {
    traverseAllows: TraverseAllows<Date>;
    impliedBasis: BaseRoot;
}
