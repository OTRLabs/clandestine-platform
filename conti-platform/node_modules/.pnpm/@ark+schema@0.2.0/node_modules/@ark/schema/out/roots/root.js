var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { cached, includes, omit, printable, throwParseError } from "@ark/util";
import { throwInvalidOperandError } from "../constraint.js";
import { BaseNode, appendUniqueFlatRefs } from "../node.js";
import { Disjoint } from "../shared/disjoint.js";
import { ArkErrors } from "../shared/errors.js";
import { structuralKinds } from "../shared/implement.js";
import { intersectNodesRoot, pipeNodesRoot } from "../shared/intersections.js";
import { arkKind, hasArkKind } from "../shared/utils.js";
let BaseRoot = (() => {
    let _classSuper = BaseNode;
    let _instanceExtraInitializers = [];
    let _keyof_decorators;
    let _get_flatMorphs_decorators;
    return class BaseRoot extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _keyof_decorators = [cached];
            _get_flatMorphs_decorators = [cached];
            __esDecorate(this, null, _keyof_decorators, { kind: "method", name: "keyof", static: false, private: false, access: { has: obj => "keyof" in obj, get: obj => obj.keyof }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _get_flatMorphs_decorators, { kind: "getter", name: "flatMorphs", static: false, private: false, access: { has: obj => "flatMorphs" in obj, get: obj => obj.flatMorphs }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        branches = (__runInitializers(this, _instanceExtraInitializers), this.hasKind("union") ? this.inner.branches : [this]);
        [arkKind] = "root";
        get internal() {
            return this;
        }
        keyof() {
            const result = this.rawKeyOf();
            if (result.branches.length === 0) {
                throwParseError(`keyof ${this.expression} results in an unsatisfiable type`);
            }
            return result;
        }
        intersect(r) {
            const rNode = this.$.parseRoot(r);
            return intersectNodesRoot(this, rNode, this.$);
        }
        and(r) {
            const result = this.intersect(r);
            return result instanceof Disjoint ? result.throw() : result;
        }
        or(r) {
            const rNode = this.$.parseRoot(r);
            const branches = [...this.branches, ...rNode.branches];
            return this.$.schema(branches);
        }
        assert(data) {
            const result = this.traverse(data);
            return result instanceof ArkErrors ? result.throw() : result;
        }
        get(...[key, ...tail]) {
            if (key === undefined)
                return this;
            if (hasArkKind(key, "root") && key.hasKind("unit"))
                key = key.unit;
            if (typeof key === "number")
                key = `${key}`;
            if (this.hasKind("union")) {
                return this.branches.reduce((acc, b) => acc.or(b.get(key, ...tail)), $ark.intrinsic.never);
            }
            return (this.structure?.get(key, ...tail) ??
                throwParseError(writeNonStructuralIndexAccessMessage(key)));
        }
        extract(r) {
            const rNode = this.$.parseRoot(r);
            return this.$.schema(this.branches.filter(branch => branch.extends(rNode)));
        }
        exclude(r) {
            const rNode = this.$.parseRoot(r);
            return this.$.schema(this.branches.filter(branch => !branch.extends(rNode)));
        }
        array() {
            return this.$.schema({
                proto: Array,
                sequence: this
            }, { prereduced: true });
        }
        overlaps(r) {
            const intersection = this.intersect(r);
            return !(intersection instanceof Disjoint);
        }
        extends(r) {
            const intersection = this.intersect(r);
            return (!(intersection instanceof Disjoint) && this.equals(intersection));
        }
        subsumes(r) {
            return r.extends(this);
        }
        includes(r) {
            return hasArkKind(r, "root") ? r.extends(this) : this.allows(r);
        }
        configure(configOrDescription) {
            return this.configureShallowDescendants(configOrDescription);
        }
        describe(description) {
            return this.configure(description);
        }
        from(input) {
            // ideally we wouldn't validate here but for now we need to do determine
            // which morphs to apply
            return this.assert(input);
        }
        pipe(...morphs) {
            return morphs.reduce((acc, morph) => acc.pipeOnce(morph), this);
        }
        pipeOnce(morph) {
            if (hasArkKind(morph, "root")) {
                const result = pipeNodesRoot(this, morph, this.$);
                if (result instanceof Disjoint)
                    return result.throw();
                return result;
            }
            if (this.hasKind("union")) {
                const branches = this.branches.map(node => node.pipe(morph));
                return this.$.node("union", { ...this.inner, branches });
            }
            if (this.hasKind("morph")) {
                return this.$.node("morph", {
                    ...this.inner,
                    morphs: [...this.morphs, morph]
                });
            }
            return this.$.node("morph", {
                in: this,
                morphs: [morph]
            });
        }
        get flatMorphs() {
            return this.flatRefs.reduce((branches, ref) => appendUniqueFlatRefs(branches, ref.node.hasKind("union") ?
                ref.node.branches
                    .filter(b => b.hasKind("morph"))
                    .map(branch => ({
                    path: ref.path,
                    propString: ref.propString,
                    node: branch
                }))
                : ref.node.hasKind("morph") ? ref
                    : []), []);
        }
        narrow(predicate) {
            return this.constrainOut("predicate", predicate);
        }
        constrain(kind, schema) {
            return this._constrain("in", kind, schema);
        }
        constrainOut(kind, schema) {
            return this._constrain("out", kind, schema);
        }
        _constrain(io, kind, schema) {
            const constraint = this.$.node(kind, schema);
            if (constraint.impliedBasis && !this[io].extends(constraint.impliedBasis)) {
                return throwInvalidOperandError(kind, constraint.impliedBasis, this);
            }
            const partialIntersection = this.$.node("intersection", {
                [kind]: constraint
            });
            const result = io === "in" ?
                intersectNodesRoot(this, partialIntersection, this.$)
                : pipeNodesRoot(this, partialIntersection, this.$);
            if (result instanceof Disjoint)
                result.throw();
            return result;
        }
        onUndeclaredKey(cfg) {
            const rule = typeof cfg === "string" ? cfg : cfg.rule;
            const deep = typeof cfg === "string" ? false : cfg.deep;
            return this.transform((kind, inner) => kind === "structure" ?
                rule === "ignore" ?
                    omit(inner, { undeclared: 1 })
                    : { ...inner, undeclared: rule }
                : inner, deep ? undefined : ({ shouldTransform: node => !includes(structuralKinds, node.kind) }));
        }
        satisfying(predicate) {
            return this.constrain("predicate", predicate);
        }
        divisibleBy(schema) {
            return this.constrain("divisor", schema);
        }
        matching(schema) {
            return this.constrain("pattern", schema);
        }
        atLeast(schema) {
            return this.constrain("min", schema);
        }
        atMost(schema) {
            return this.constrain("max", schema);
        }
        moreThan(schema) {
            return this.constrain("min", exclusivizeRangeSchema(schema));
        }
        lessThan(schema) {
            return this.constrain("max", exclusivizeRangeSchema(schema));
        }
        atLeastLength(schema) {
            return this.constrain("minLength", schema);
        }
        atMostLength(schema) {
            return this.constrain("maxLength", schema);
        }
        moreThanLength(schema) {
            return this.constrain("minLength", exclusivizeRangeSchema(schema));
        }
        lessThanLength(schema) {
            return this.constrain("maxLength", exclusivizeRangeSchema(schema));
        }
        exactlyLength(schema) {
            return this.constrain("exactLength", schema);
        }
        atOrAfter(schema) {
            return this.constrain("after", schema);
        }
        atOrBefore(schema) {
            return this.constrain("before", schema);
        }
        laterThan(schema) {
            return this.constrain("after", exclusivizeRangeSchema(schema));
        }
        earlierThan(schema) {
            return this.constrain("before", exclusivizeRangeSchema(schema));
        }
    };
})();
export { BaseRoot };
export const exclusivizeRangeSchema = (schema) => (typeof schema === "object" && !(schema instanceof Date) ?
    { ...schema, exclusive: true }
    : {
        rule: schema,
        exclusive: true
    });
export const writeNonStructuralIndexAccessMessage = (key) => `${printable(key)} cannot be accessed on ${this}, which has no structural keys`;
