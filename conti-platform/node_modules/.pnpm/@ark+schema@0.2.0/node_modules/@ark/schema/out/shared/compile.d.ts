import { CompiledFunction } from "@ark/util";
import type { BaseNode } from "../node.js";
import type { Discriminant } from "../roots/union.js";
import type { TraversalKind } from "./traversal.js";
export interface InvokeOptions extends ReferenceOptions {
    arg?: string;
}
export interface ReferenceOptions {
    kind?: TraversalKind;
    bind?: string;
}
export declare class NodeCompiler extends CompiledFunction<["data", "ctx"]> {
    traversalKind: TraversalKind;
    path: string[];
    discriminants: Discriminant[];
    constructor(traversalKind: TraversalKind);
    invoke(node: BaseNode, opts?: InvokeOptions): string;
    reference(node: BaseNode, opts?: ReferenceOptions): string;
    requiresContextFor(node: BaseNode): boolean;
    initializeErrorCount(): this;
    returnIfFail(): this;
    returnIfFailFast(): this;
    traverseKey(keyExpression: string, accessExpression: string, node: BaseNode): this;
    check(node: BaseNode, opts?: InvokeOptions): this;
    writeMethod(name: string): string;
}
