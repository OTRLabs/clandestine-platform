import { Disjoint } from "../shared/disjoint.js";
import { implementNode } from "../shared/implement.js";
import { BaseRange, parseExclusiveKey } from "./range.js";
export const maxLengthImplementation = implementNode({
    kind: "maxLength",
    collapsibleKey: "rule",
    hasAssociatedError: true,
    keys: {
        rule: {},
        exclusive: parseExclusiveKey
    },
    normalize: schema => typeof schema === "number" ? { rule: schema } : schema,
    defaults: {
        description: node => node.exclusive ?
            `less than length ${node.rule}`
            : `at most length ${node.rule}`,
        actual: data => `${data.length}`
    },
    intersections: {
        maxLength: (l, r) => (l.isStricterThan(r) ? l : r),
        minLength: (max, min, ctx) => max.overlapsRange(min) ?
            max.overlapIsUnit(min) ?
                ctx.$.node("exactLength", { rule: max.rule })
                : null
            : Disjoint.init("range", max, min)
    }
});
export class MaxLengthNode extends BaseRange {
    impliedBasis = $ark.intrinsic.lengthBoundable;
    traverseAllows = this.exclusive ?
        data => data.length < this.rule
        : data => data.length <= this.rule;
}
