import { type Key, type NonEnumerableDomain, type array } from "@ark/util";
import type { BaseMeta, declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { RawBasis } from "./basis.js";
export interface DomainInner<domain extends NonEnumerableDomain = NonEnumerableDomain> extends BaseMeta {
    readonly domain: domain;
}
export type DomainSchema<domain extends NonEnumerableDomain = NonEnumerableDomain> = domain | DomainInner<domain>;
export interface DomainDeclaration extends declareNode<{
    kind: "domain";
    schema: DomainSchema;
    normalizedSchema: DomainInner;
    inner: DomainInner;
    errorContext: DomainInner;
}> {
}
export declare class DomainNode extends RawBasis<DomainDeclaration> {
    traverseAllows: TraverseAllows;
    readonly compiledCondition: string;
    readonly compiledNegation: string;
    readonly expression: string;
    readonly literalKeys: array<Key>;
    get shortDescription(): string;
}
export declare const domainImplementation: nodeImplementationOf<DomainDeclaration>;
