import type { BaseRoot } from "../roots/root.js";
import type { declareNode } from "../shared/declare.js";
import { type nodeImplementationOf } from "../shared/implement.js";
import type { TraverseAllows } from "../shared/traversal.js";
import { BaseRange, type BaseRangeInner, type LengthBoundableData, type UnknownNormalizedRangeSchema } from "./range.js";
export interface MinLengthInner extends BaseRangeInner {
    rule: number;
}
export interface NormalizedMinLengthSchema extends UnknownNormalizedRangeSchema {
    rule: number;
}
export type MinLengthSchema = NormalizedMinLengthSchema | number;
export interface MinLengthDeclaration extends declareNode<{
    kind: "minLength";
    schema: MinLengthSchema;
    normalizedSchema: NormalizedMinLengthSchema;
    inner: MinLengthInner;
    prerequisite: LengthBoundableData;
    errorContext: MinLengthInner;
}> {
}
export declare const minLengthImplementation: nodeImplementationOf<MinLengthDeclaration>;
export declare class MinLengthNode extends BaseRange<MinLengthDeclaration> {
    readonly impliedBasis: BaseRoot;
    traverseAllows: TraverseAllows<LengthBoundableData>;
}
